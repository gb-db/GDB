// <auto-generated />
using System;
using DataLibrary.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Users.Migrations
{
    [DbContext(typeof(AppIdentityDbContext))]
    [Migration("20191217024128_Initial_Migration")]
    partial class Initial_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Models.Heritage.Church", b =>
                {
                    b.Property<int>("churchId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(150);

                    b.Property<string>("ShortName")
                        .HasMaxLength(10);

                    b.Property<int?>("cityId");

                    b.Property<int?>("countryId");

                    b.Property<bool>("isActive");

                    b.Property<int?>("provinceId");

                    b.HasKey("churchId");

                    b.HasIndex("cityId");

                    b.HasIndex("countryId");

                    b.HasIndex("provinceId");

                    b.ToTable("Church");
                });

            modelBuilder.Entity("Models.Heritage.City", b =>
                {
                    b.Property<int>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("ShortName")
                        .HasMaxLength(10);

                    b.Property<int?>("countryId");

                    b.Property<bool>("isActive");

                    b.Property<int?>("provinceId");

                    b.HasKey("cityId");

                    b.HasIndex("countryId");

                    b.HasIndex("provinceId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Models.Heritage.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("ShortName")
                        .HasMaxLength(10);

                    b.Property<string>("imgPath")
                        .HasMaxLength(150);

                    b.Property<bool>("isActive");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("Models.Heritage.HerInfoSrc", b =>
                {
                    b.Property<int>("HerInfoSrcId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HeratigeUserId");

                    b.Property<string>("desc");

                    b.Property<bool>("isActive");

                    b.Property<int>("level");

                    b.Property<int>("number");

                    b.Property<int>("parent_level");

                    b.Property<int>("parent_number");

                    b.Property<int>("user_id");

                    b.HasKey("HerInfoSrcId");

                    b.HasIndex("HeratigeUserId");

                    b.ToTable("HerInfoSrcs");
                });

            modelBuilder.Entity("Models.Heritage.HeratigeData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CountryBPId");

                    b.Property<int>("CountryId");

                    b.Property<DateTime?>("DOB");

                    b.Property<int>("HeratigeUserId");

                    b.Property<string>("ImageFolderPath")
                        .HasMaxLength(1500);

                    b.Property<string>("ImagePath")
                        .HasMaxLength(1500);

                    b.Property<DateTime?>("PWD");

                    b.Property<string>("UserCode")
                        .HasMaxLength(8);

                    b.Property<int?>("churchId");

                    b.Property<int?>("cityBPId");

                    b.Property<int?>("cityId");

                    b.Property<DateTime>("dateTime");

                    b.Property<string>("fName")
                        .HasMaxLength(50);

                    b.Property<string>("fNameParentF")
                        .HasMaxLength(50);

                    b.Property<string>("fNameParentM")
                        .HasMaxLength(50);

                    b.Property<string>("information");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isClosed");

                    b.Property<bool>("isEditable");

                    b.Property<string>("lName")
                        .HasMaxLength(50);

                    b.Property<string>("lNameParentF")
                        .HasMaxLength(50);

                    b.Property<string>("lNameParentM")
                        .HasMaxLength(50);

                    b.Property<int>("last_child");

                    b.Property<int>("level");

                    b.Property<int>("number");

                    b.Property<int>("parent_level");

                    b.Property<int>("parent_number");

                    b.Property<string>("pattern")
                        .HasMaxLength(5000);

                    b.Property<string>("person")
                        .HasMaxLength(50);

                    b.Property<int?>("provinceBPId");

                    b.Property<int?>("provinceId");

                    b.Property<int>("tt_height");

                    b.Property<int>("tt_width");

                    b.Property<int>("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CountryBPId");

                    b.HasIndex("CountryId");

                    b.HasIndex("HeratigeUserId");

                    b.HasIndex("churchId");

                    b.HasIndex("cityBPId");

                    b.HasIndex("cityId");

                    b.HasIndex("provinceBPId");

                    b.HasIndex("provinceId");

                    b.ToTable("HeratigeDatas");
                });

            modelBuilder.Entity("Models.Heritage.HeratigePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HeratigeUserId");

                    b.Property<string>("UserCode")
                        .HasMaxLength(8);

                    b.Property<DateTime>("dateTime");

                    b.Property<bool>("isReadable");

                    b.Property<bool>("isRoot");

                    b.Property<bool>("isWritable");

                    b.Property<bool>("permit");

                    b.Property<int>("user_id");

                    b.HasKey("Id");

                    b.HasIndex("HeratigeUserId");

                    b.ToTable("HeratigePermissions");
                });

            modelBuilder.Entity("Models.Heritage.HeratigeUser", b =>
                {
                    b.Property<int>("HeratigeUserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserCode")
                        .HasMaxLength(8);

                    b.Property<string>("description")
                        .HasMaxLength(500);

                    b.Property<string>("fName")
                        .HasMaxLength(50);

                    b.Property<bool>("isActive");

                    b.Property<string>("lName")
                        .HasMaxLength(50);

                    b.Property<int>("user_id");

                    b.HasKey("HeratigeUserId");

                    b.ToTable("HeratigeUsers");
                });

            modelBuilder.Entity("Models.Heritage.Info_Src", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("HerInfoSrcId");

                    b.Property<string>("comment")
                        .HasMaxLength(10000);

                    b.Property<bool>("isActive");

                    b.Property<int>("number");

                    b.Property<string>("src")
                        .HasMaxLength(1500);

                    b.Property<int>("tt_height");

                    b.Property<int>("tt_width");

                    b.HasKey("Id");

                    b.HasIndex("HerInfoSrcId");

                    b.ToTable("Info_Srcs");
                });

            modelBuilder.Entity("Models.Heritage.Province", b =>
                {
                    b.Property<int>("provinceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.Property<string>("ShortName")
                        .HasMaxLength(10);

                    b.Property<int?>("countryId");

                    b.Property<bool>("isActive");

                    b.HasKey("provinceId");

                    b.HasIndex("countryId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("Models.News.NewsData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Path")
                        .HasMaxLength(1500);

                    b.Property<string>("UserCode")
                        .HasMaxLength(8);

                    b.Property<int>("church");

                    b.Property<int>("country");

                    b.Property<string>("description")
                        .HasMaxLength(500);

                    b.Property<string>("fName")
                        .HasMaxLength(50);

                    b.Property<string>("lName")
                        .HasMaxLength(50);

                    b.Property<string>("person")
                        .HasMaxLength(50);

                    b.Property<int>("province");

                    b.Property<bool>("status");

                    b.Property<int>("user_id");

                    b.HasKey("Id");

                    b.ToTable("NewsData");
                });

            modelBuilder.Entity("Models.Users.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("City");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("Qualifications");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserCode")
                        .HasMaxLength(8);

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Models.Users.Code", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserCode")
                        .HasMaxLength(8);

                    b.Property<int>("church");

                    b.Property<int>("country");

                    b.Property<string>("description")
                        .HasMaxLength(500);

                    b.Property<string>("fName")
                        .HasMaxLength(50);

                    b.Property<string>("lName")
                        .HasMaxLength(50);

                    b.Property<string>("person")
                        .HasMaxLength(50);

                    b.Property<int>("province");

                    b.Property<bool>("status");

                    b.HasKey("Id");

                    b.ToTable("Codes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Models.Users.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Models.Users.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Users.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Models.Users.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Heritage.Church", b =>
                {
                    b.HasOne("Models.Heritage.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId");

                    b.HasOne("Models.Heritage.Country", "country")
                        .WithMany("Churches")
                        .HasForeignKey("countryId");

                    b.HasOne("Models.Heritage.Province", "province")
                        .WithMany()
                        .HasForeignKey("provinceId");
                });

            modelBuilder.Entity("Models.Heritage.City", b =>
                {
                    b.HasOne("Models.Heritage.Country", "country")
                        .WithMany("Cities")
                        .HasForeignKey("countryId");

                    b.HasOne("Models.Heritage.Province", "province")
                        .WithMany()
                        .HasForeignKey("provinceId");
                });

            modelBuilder.Entity("Models.Heritage.HerInfoSrc", b =>
                {
                    b.HasOne("Models.Heritage.HeratigeUser", "HeratigeUser")
                        .WithMany("HerInfoSrcs")
                        .HasForeignKey("HeratigeUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Heritage.HeratigeData", b =>
                {
                    b.HasOne("Models.Heritage.Country", "countryBP")
                        .WithMany()
                        .HasForeignKey("CountryBPId");

                    b.HasOne("Models.Heritage.Country", "country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Heritage.HeratigeUser", "HeratigeUser")
                        .WithMany("HeratigeDatas")
                        .HasForeignKey("HeratigeUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Heritage.Church", "church")
                        .WithMany()
                        .HasForeignKey("churchId");

                    b.HasOne("Models.Heritage.City", "cityBP")
                        .WithMany()
                        .HasForeignKey("cityBPId");

                    b.HasOne("Models.Heritage.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId");

                    b.HasOne("Models.Heritage.Province", "provinceBP")
                        .WithMany()
                        .HasForeignKey("provinceBPId");

                    b.HasOne("Models.Heritage.Province", "province")
                        .WithMany()
                        .HasForeignKey("provinceId");
                });

            modelBuilder.Entity("Models.Heritage.HeratigePermission", b =>
                {
                    b.HasOne("Models.Heritage.HeratigeUser", "HeratigeUser")
                        .WithMany()
                        .HasForeignKey("HeratigeUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Heritage.Info_Src", b =>
                {
                    b.HasOne("Models.Heritage.HerInfoSrc", "herInfoSrcs")
                        .WithMany("infoSrcs")
                        .HasForeignKey("HerInfoSrcId");
                });

            modelBuilder.Entity("Models.Heritage.Province", b =>
                {
                    b.HasOne("Models.Heritage.Country", "country")
                        .WithMany("Provinces")
                        .HasForeignKey("countryId");
                });
#pragma warning restore 612, 618
        }
    }
}
